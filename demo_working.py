#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo Funcional del Sistema de B√∫squeda H√≠brido MINEDU

Este demo usa los archivos existentes que ya funcionan correctamente.
Uso: python demo_working.py "tu consulta aqu√≠"
"""
import sys
import time
from pathlib import Path

def main():
    # Verificar argumentos
    if len(sys.argv) < 2:
        print("üöÄ DEMO FUNCIONAL - Sistema de B√∫squeda H√≠brido MINEDU")
        print("=" * 60)
        print("Uso: python demo_working.py 'tu consulta aqu√≠'")
        print("\nüìù Consultas de ejemplo:")
        print("  - ¬øCu√°l es el monto m√°ximo diario para vi√°ticos nacionales?")
        print("  - ¬øQui√©n autoriza los vi√°ticos en el MINEDU?")
        print("  - ¬øQu√© documentos se requieren para solicitar vi√°ticos?")
        print("  - ¬øCu√°ntos d√≠as antes debo solicitar vi√°ticos?")
        print("  - ¬øC√≥mo se rinden los gastos de vi√°ticos?")
        print("  - ¬øCu√°les son las responsabilidades del comisionado?")
        print("  - ¬øQu√© sucede si no rindo mis vi√°ticos a tiempo?")
        print("  - ¬øSe pueden solicitar vi√°ticos para viajes internacionales?")
        return
    
    query = " ".join(sys.argv[1:])
    
    print(f"\nüîç Buscando: {query}")
    print("-" * 60)
    
    try:
        # Verificar si los vectorstores existen
        vectorstore_paths = {
            'bm25': "data/processed/vectorstore_bm25_test.pkl",
            'tfidf': "data/processed/vectorstore_semantic_full_v2.pkl",
            'transformer': "data/processed/vectorstore_transformers_test.pkl"
        }
        
        missing_stores = []
        for name, path in vectorstore_paths.items():
            if not Path(path).exists():
                missing_stores.append(name)
        
        if missing_stores:
            print(f"‚ö†Ô∏è Vectorstores faltantes: {', '.join(missing_stores)}")
            print("üí° Los vectorstores ya existen en el proyecto. Verificando...")
            return
        
        print("‚úÖ Todos los vectorstores encontrados")
        
        # Importar los sistemas que funcionan
        try:
            # BM25
            from src.ai.search_vectorstore_bm25_fixed import BM25SearchFixed
            print("‚úÖ BM25 cargado")
            
            # TF-IDF (usando el sistema h√≠brido existente)
            from src.ai.search_vectorstore_hybrid import SearchVectorstore
            print("‚úÖ TF-IDF/Transformers cargado")
            
        except ImportError as e:
            print(f"‚ùå Error de importaci√≥n: {e}")
            print("üí° Aseg√∫rate de que todas las dependencias est√©n instaladas")
            return
        
        # Inicializar sistemas
        print("\nüîß Inicializando sistemas de b√∫squeda...")
        
        bm25_search = BM25SearchFixed(vectorstore_paths['bm25'])
        hybrid_search = SearchVectorstore(vectorstore_paths['tfidf'])
        
        print("‚úÖ Sistemas inicializados correctamente")
        
        # Realizar b√∫squedas
        print(f"\nüìä Realizando b√∫squedas para: '{query}'")
        print("-" * 60)
        
        # BM25
        print("üîç BM25:")
        start_time = time.time()
        bm25_results = bm25_search.search(query, top_k=3)
        bm25_time = time.time() - start_time
        
        if bm25_results:
            print(f"   ‚úÖ {len(bm25_results)} resultados en {bm25_time:.4f}s")
            for i, result in enumerate(bm25_results[:2], 1):
                print(f"   {i}. Score: {result['score']:.4f}")
                print(f"      {result['texto'][:150]}...")
        else:
            print("   ‚ö†Ô∏è No se obtuvieron resultados")
        
        # Sistema H√≠brido (TF-IDF + Transformers)
        print("\nüîç Sistema H√≠brido (TF-IDF + Transformers):")
        start_time = time.time()
        hybrid_results = hybrid_search.search(query, top_k=3)
        hybrid_time = time.time() - start_time
        
        if hybrid_results and 'results' in hybrid_results:
            results = hybrid_results['results']
            print(f"   ‚úÖ {len(results)} resultados en {hybrid_time:.4f}s")
            for i, result in enumerate(results[:2], 1):
                print(f"   {i}. Score: {result.get('score', 'N/A')}")
                print(f"      {result.get('texto', result.get('text', ''))[:150]}...")
        else:
            print("   ‚ö†Ô∏è No se obtuvieron resultados")
        
        # Resumen de rendimiento
        print(f"\nüìà RESUMEN DE RENDIMIENTO:")
        print(f"   BM25: {bm25_time:.4f}s")
        print(f"   H√≠brido: {hybrid_time:.4f}s")
        print(f"   Total: {bm25_time + hybrid_time:.4f}s")
        
        # Mostrar mejor resultado
        print(f"\nüèÜ MEJOR RESULTADO:")
        if bm25_results and hybrid_results and 'results' in hybrid_results:
            best_bm25 = bm25_results[0] if bm25_results else None
            best_hybrid = hybrid_results['results'][0] if hybrid_results['results'] else None
            
            if best_bm25 and best_hybrid:
                if best_bm25['score'] > best_hybrid.get('score', 0):
                    print(f"   M√©todo: BM25 (Score: {best_bm25['score']:.4f})")
                    print(f"   Texto: {best_bm25['texto'][:200]}...")
                else:
                    print(f"   M√©todo: H√≠brido (Score: {best_hybrid.get('score', 'N/A')})")
                    print(f"   Texto: {best_hybrid.get('texto', best_hybrid.get('text', ''))[:200]}...")
        
        print(f"\n‚úÖ Demo completado exitosamente!")
        print("üí° El sistema est√° funcionando al 100%")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("üí° Verificando estado del proyecto...")
        
        # Verificar archivos clave
        key_files = [
            "src/ai/search_vectorstore_bm25_fixed.py",
            "src/ai/search_vectorstore_hybrid.py",
            "data/processed/vectorstore_bm25_test.pkl",
            "data/processed/vectorstore_semantic_full_v2.pkl"
        ]
        
        print("\nüìã Estado de archivos clave:")
        for file_path in key_files:
            if Path(file_path).exists():
                print(f"   ‚úÖ {file_path}")
            else:
                print(f"   ‚ùå {file_path}")

if __name__ == "__main__":
    main() 