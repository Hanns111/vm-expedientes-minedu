#!/usr/bin/env python3
"""
Test de Integraci√≥n Frontend-Backend MINEDU
==========================================

Pruebas para verificar la comunicaci√≥n entre el frontend Next.js
y el backend FastAPI con sistema h√≠brido de b√∫squeda.
"""
import requests
import json
import time
from typing import Dict, Any

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000"
FRONTEND_URL = "http://localhost:3000"

def test_backend_health():
    """Probar endpoint de salud del backend"""
    print("üîç Probando conexi√≥n con backend...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Backend responde correctamente")
            print(f"   Estado: {data.get('status', 'unknown')}")
            print(f"   Versi√≥n: {data.get('version', 'unknown')}")
            print(f"   Vectorstores: {data.get('vectorstores', {})}")
            return True
        else:
            print(f"‚ùå Backend responde con error: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error conectando con backend: {e}")
        return False

def test_search_endpoint():
    """Probar endpoint de b√∫squeda"""
    print("\nüîç Probando endpoint de b√∫squeda...")
    
    search_data = {
        "query": "¬øCu√°l es el monto m√°ximo para vi√°ticos?",
        "method": "hybrid",
        "top_k": 3,
        "fusion_method": "weighted"
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/search",
            json=search_data,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ B√∫squeda exitosa")
            print(f"   Query: {data.get('query', '')}")
            print(f"   M√©todo: {data.get('method', '')}")
            print(f"   Tiempo: {data.get('processing_time', 0):.3f}s")
            print(f"   Resultados: {data.get('total_results', 0)}")
            
            # Mostrar primer resultado si existe
            results = data.get('results', [])
            if results:
                first_result = results[0]
                print(f"   Primer resultado:")
                print(f"     Score: {first_result.get('score', 0):.3f}")
                print(f"     Contenido: {first_result.get('content', '')[:100]}...")
            
            return True
        else:
            print(f"‚ùå Error en b√∫squeda: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error en b√∫squeda: {e}")
        return False

def test_cors_headers():
    """Probar headers CORS"""
    print("\nüîç Probando configuraci√≥n CORS...")
    
    try:
        # Simular request desde frontend
        headers = {
            'Origin': 'http://localhost:3000',
            'Access-Control-Request-Method': 'POST',
            'Access-Control-Request-Headers': 'Content-Type'
        }
        
        response = requests.options(f"{API_BASE_URL}/search", headers=headers)
        
        if response.status_code == 200:
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')
            }
            
            print("‚úÖ CORS configurado correctamente")
            for header, value in cors_headers.items():
                if value:
                    print(f"   {header}: {value}")
            return True
        else:
            print(f"‚ùå Error en CORS: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error probando CORS: {e}")
        return False

def test_error_handling():
    """Probar manejo de errores"""
    print("\nüîç Probando manejo de errores...")
    
    # Test con query vac√≠a
    try:
        response = requests.post(
            f"{API_BASE_URL}/search",
            json={"query": "", "method": "hybrid"},
            timeout=5
        )
        
        if response.status_code == 422:  # Validation error esperado
            print("‚úÖ Validaci√≥n de entrada funciona correctamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Respuesta inesperada para query vac√≠a: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error probando validaci√≥n: {e}")
        return False

def test_api_documentation():
    """Probar acceso a documentaci√≥n API"""
    print("\nüîç Probando documentaci√≥n API...")
    
    try:
        # Test docs endpoint
        response = requests.get(f"{API_BASE_URL}/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Documentaci√≥n FastAPI disponible en /docs")
            docs_available = True
        else:
            print(f"‚ö†Ô∏è  Documentaci√≥n no disponible: {response.status_code}")
            docs_available = False
        
        # Test redoc endpoint
        response = requests.get(f"{API_BASE_URL}/redoc", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ReDoc disponible en /redoc")
            redoc_available = True
        else:
            print(f"‚ö†Ô∏è  ReDoc no disponible: {response.status_code}")
            redoc_available = False
        
        return docs_available or redoc_available
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error accediendo a documentaci√≥n: {e}")
        return False

def main():
    """Ejecutar todas las pruebas de integraci√≥n"""
    print("üöÄ INICIANDO PRUEBAS DE INTEGRACI√ìN FRONTEND-BACKEND")
    print("=" * 60)
    
    tests = [
        ("Backend Health", test_backend_health),
        ("Search Endpoint", test_search_endpoint),
        ("CORS Configuration", test_cors_headers),
        ("Error Handling", test_error_handling),
        ("API Documentation", test_api_documentation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        success = test_func()
        results.append((test_name, success))
        time.sleep(1)  # Pausa entre tests
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{test_name:.<40} {status}")
        if success:
            passed += 1
    
    print(f"\nResultado: {passed}/{len(results)} pruebas exitosas")
    
    if passed == len(results):
        print("\nüéâ ¬°INTEGRACI√ìN COMPLETAMENTE FUNCIONAL!")
        print("   El frontend puede comunicarse correctamente con el backend.")
        print("   Puedes proceder a iniciar ambos servicios:")
        print()
        print("   1. Backend:  cd /mnt/c/Users/hanns/Documents/proyectos/vm-expedientes-minedu")
        print("               python api_minedu.py")
        print()
        print("   2. Frontend: cd /mnt/c/Users/hanns/Documents/proyectos/vm-expedientes-minedu/frontend-new")
        print("               npm install && npm run dev")
        print()
        print("   3. Acceder:  http://localhost:3000")
    else:
        print("\n‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON")
        print("   Revisa la configuraci√≥n antes de proceder.")
        print(f"   Aseg√∫rate de que el backend est√© ejecut√°ndose en {API_BASE_URL}")
    
    return passed == len(results)

if __name__ == "__main__":
    main()