name: CI/CD Pipeline - Government AI Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Backend quality check
  backend-quality:
    name: Backend Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Ruff Linter
        run: ruff check . --output-format=github
        
      - name: Check Ruff Formatting
        run: ruff format --check --diff .
        
      - name: Run Tests
        run: pytest tests/ -v --cov=src --cov-report=xml
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend quality check
  frontend-quality:
    name: Frontend Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript
        run: npm run type-check
        
      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install security tools
        run: |
          pip install bandit safety
          
      - name: Run Bandit Security Scan
        run: |
          bandit -r backend/src/ -f json -o bandit-report.json || true
          bandit -r backend/src/
        continue-on-error: true
        
      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: bandit-report.json

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy notification
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "‚úÖ All quality checks passed"
          echo "üìä Branch: ${{ github.ref }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üì¶ Ready for staging deployment" 