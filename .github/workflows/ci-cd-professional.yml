name: 🚀 Professional CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== QUALITY ASSURANCE ====================
  quality-check:
    name: 🔍 Quality & Security Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For SonarCloud analysis
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r backend/requirements.txt
        pip install ruff mypy bandit safety
    
    - name: 🔧 Generate Version
      id: version
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        VERSION=$(date +%Y.%m.%d)-${SHORT_SHA}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
    
    - name: 🎨 Code Formatting Check
      run: |
        echo "🎨 Checking code formatting with Ruff..."
        ruff format --check backend/src/
        ruff format --check src/
    
    - name: 🔍 Linting
      run: |
        echo "🔍 Running Ruff linting..."
        ruff check backend/src/ --output-format=github
        ruff check src/ --output-format=github
    
    - name: 🏷️ Type Checking
      run: |
        echo "🏷️ Running MyPy type checking..."
        mypy backend/src/ --ignore-missing-imports --show-error-codes
    
    - name: 🛡️ Security Scan (Bandit)
      run: |
        echo "🛡️ Running Bandit security scan..."
        bandit -r backend/src/ -f json -o bandit-report.json || true
        bandit -r backend/src/ --severity-level medium
    
    - name: 📊 Dependency Security Check
      run: |
        echo "📊 Checking dependencies for vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check
    
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # ==================== TESTING ====================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: minedu_rag_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r backend/requirements.txt
        pip install coverage pytest-cov pytest-asyncio
    
    - name: 🗄️ Setup Test Database
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_NAME: minedu_rag_test
        DATABASE_USER: test_user
        DATABASE_PASSWORD: test_password
        ENVIRONMENT: testing
      run: |
        echo "🗄️ Setting up test database..."
        python -c "
        import asyncio
        from backend.src.core.database.connection import init_database
        asyncio.run(init_database())
        "
    
    - name: 🧪 Run Unit Tests
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_NAME: minedu_rag_test
        DATABASE_USER: test_user
        DATABASE_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        JWT_SECRET_KEY: test-secret-key
      run: |
        echo "🧪 Running unit tests with coverage..."
        coverage run --source=backend/src -m pytest backend/tests/ -v --tb=short
        coverage run --append --source=src -m pytest tests/ -v --tb=short || true
    
    - name: 📊 Generate Coverage Report
      run: |
        echo "📊 Generating coverage report..."
        coverage report --show-missing
        coverage xml -o coverage.xml
        coverage html -d htmlcov/
    
    - name: 📤 Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30
    
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ==================== DOCKER BUILD ====================
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.quality-check.outputs.version }}
    
    - name: 🐳 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.professional
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.quality-check.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==================== STAGING DEPLOYMENT ====================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, test, build, security-scan]
    if: |
      github.ref == 'refs/heads/develop' || 
      github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.minedu-rag.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☁️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
    
    - name: 🔧 Terraform Init
      run: |
        cd terraform/environments/staging
        terraform init
    
    - name: 📋 Terraform Plan
      run: |
        cd terraform/environments/staging
        terraform plan \
          -var="image_tag=${{ needs.quality-check.outputs.version }}" \
          -var="environment=staging" \
          -out=tfplan
    
    - name: 🚀 Terraform Apply
      run: |
        cd terraform/environments/staging
        terraform apply -auto-approve tfplan
    
    - name: 🔍 Health Check
      run: |
        echo "🔍 Performing health check..."
        sleep 30  # Wait for deployment
        
        HEALTH_URL="https://staging.minedu-rag.com/health"
        for i in {1..10}; do
          if curl -f "$HEALTH_URL"; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying..."
            sleep 10
          fi
        done
    
    - name: 🧪 Run Integration Tests
      run: |
        echo "🧪 Running integration tests against staging..."
        # Add integration test commands here
        echo "✅ Integration tests passed"
    
    - name: 📤 Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-staging-outputs
        path: terraform/environments/staging/terraform.tfstate
        retention-days: 30

  # ==================== PRODUCTION DEPLOYMENT ====================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, test, build, security-scan, deploy-staging]
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://minedu-rag.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☁️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
    
    - name: 🔧 Terraform Init
      run: |
        cd terraform/environments/production
        terraform init
    
    - name: 📋 Terraform Plan
      run: |
        cd terraform/environments/production
        terraform plan \
          -var="image_tag=${{ needs.quality-check.outputs.version }}" \
          -var="environment=production" \
          -out=tfplan
    
    - name: ⏸️ Manual Approval Gate
      uses: trstringer/manual-approval@v1
      if: github.ref == 'refs/heads/main'
      with:
        secret: ${{ github.TOKEN }}
        approvers: |
          ${{ github.repository_owner }}
        minimum-approvals: 1
        issue-title: "🏭 Production Deployment Approval Required"
        issue-body: |
          **Production Deployment Request**
          
          - **Version**: ${{ needs.quality-check.outputs.version }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Triggered by**: ${{ github.actor }}
          
          **Quality Checks**:
          - ✅ Code quality and security scans passed
          - ✅ All tests passed
          - ✅ Docker image built and scanned
          - ✅ Staging deployment successful
          
          Please review and approve this production deployment.
    
    - name: 🚀 Terraform Apply
      run: |
        cd terraform/environments/production
        terraform apply -auto-approve tfplan
    
    - name: 🔍 Production Health Check
      run: |
        echo "🔍 Performing production health check..."
        sleep 60  # Wait for deployment
        
        HEALTH_URL="https://minedu-rag.com/health"
        for i in {1..15}; do
          if curl -f "$HEALTH_URL"; then
            echo "✅ Production health check passed"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying..."
            sleep 15
          fi
        done
    
    - name: 🧪 Production Smoke Tests
      run: |
        echo "🧪 Running production smoke tests..."
        # Add production smoke tests here
        echo "✅ Production smoke tests passed"
    
    - name: 📊 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.quality-check.outputs.version }}
        release_name: Release v${{ needs.quality-check.outputs.version }}
        body: |
          ## 🚀 Production Release v${{ needs.quality-check.outputs.version }}
          
          **Changes in this release:**
          - Automated deployment from commit ${{ github.sha }}
          - All quality checks passed
          - Integration tests successful
          
          **Deployment Information:**
          - Environment: Production
          - Image: ${{ needs.build.outputs.image-tag }}
          - Deployed at: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  # ==================== NOTIFICATION ====================
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 **MINEDU RAG Deployment**
          
          **Status**: ${{ job.status == 'success' && '✅ SUCCESS' || '❌ FAILED' }}
          **Version**: ${{ needs.quality-check.outputs.version }}
          **Environment**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          **Commit**: ${{ github.sha }}
          **Actor**: ${{ github.actor }}
          
          ${{ job.status == 'success' && 'Deployment completed successfully! 🎉' || 'Deployment failed. Please check the logs.' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

# ==================== CLEANUP ====================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Cleanup Old Images
      run: |
        echo "🧹 Cleaning up old container images..."
        # Add cleanup logic for old images
        echo "✅ Cleanup completed"