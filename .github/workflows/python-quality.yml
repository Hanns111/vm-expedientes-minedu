name: Python Code Quality

on:
  push:
    branches: [main, develop]
    paths:
      - "**.py"
      - "pyproject.toml"
      - ".github/workflows/python-quality.yml"
      - "requirements*.txt"
  pull_request:
    branches: [main, develop]
    paths:
      - "**.py"
      - "pyproject.toml"
      - ".github/workflows/python-quality.yml" 
      - "requirements*.txt"

# Permisos m√≠nimos necesarios
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ============================================================================
  # QUALITY CHECK JOB
  # ============================================================================
  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    
    steps:
      # Checkout c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
      
      # Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"
          
      # Cache para Ruff
      - name: Cache Ruff
        uses: actions/cache@v3
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          
      # ========================================================================
      # RUFF LINTING
      # ========================================================================
      - name: Run Ruff Linter
        run: |
          echo "üîç Running Ruff linter..."
          ruff check . --output-format=github
        continue-on-error: false
        
      # ========================================================================
      # RUFF FORMATTING CHECK
      # ========================================================================
      - name: Check Ruff Formatting
        run: |
          echo "üé® Checking code formatting..."
          ruff format --check --diff .
        continue-on-error: false
        
      # ========================================================================
      # MYPY TYPE CHECKING
      # ========================================================================
      - name: Run MyPy Type Checker
        run: |
          echo "üî¨ Running MyPy type checker..."
          mypy --config-file=pyproject.toml src/ backend/
        continue-on-error: true  # No fallar por errores de tipos a√∫n
        
      # ========================================================================
      # SECURITY SCAN
      # ========================================================================
      - name: Run Security Scan (Bandit)
        run: |
          echo "üîí Running security scan..."
          bandit -r src/ backend/ -f json -o bandit-report.json || true
          bandit -r src/ backend/ -f txt
        continue-on-error: true
        
      # ========================================================================
      # UPLOAD ARTIFACTS
      # ========================================================================
      - name: Upload Bandit Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-results-py${{ matrix.python-version }}
          path: bandit-report.json
          retention-days: 7

  # ============================================================================
  # RUFF FIX JOB (Solo en PRs)
  # ============================================================================
  ruff-fix:
    name: Auto-fix Code Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff
          
      # Aplicar fixes autom√°ticos
      - name: Run Ruff Auto-fix
        run: |
          echo "üîß Applying automatic fixes..."
          ruff check . --fix
          ruff format .
          
      # Commit cambios si los hay
      - name: Commit fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "üìù Changes detected, committing fixes..."
            git add .
            git commit -m "ü§ñ Auto-fix code style issues with Ruff

            - Applied Ruff linting fixes
            - Applied Ruff formatting
            - Automated commit from CI
            
            Co-authored-by: GitHub Actions <action@github.com>"
            git push
          else
            echo "‚úÖ No fixes needed"
          fi

  # ============================================================================
  # TESTING JOB  
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    if: always() && needs.quality.result != 'failure'
    
    strategy:
      matrix:
        python-version: ["3.8", "3.11"]
      fail-fast: false
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev,performance]"
          
      - name: Run tests with coverage
        run: |
          echo "üß™ Running test suite..."
          pytest --cov --cov-report=xml --cov-report=term-missing
        env:
          REDIS_URL: redis://localhost:6379
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}

  # ============================================================================
  # SUMMARY JOB
  # ============================================================================
  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## üìä Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality.result }}" == "success" ]]; then
            echo "‚úÖ **Code Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Code Quality**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ **Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üõ†Ô∏è Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "- **Ruff**: Linting + Formatting" >> $GITHUB_STEP_SUMMARY
          echo "- **MyPy**: Type checking" >> $GITHUB_STEP_SUMMARY
          echo "- **Bandit**: Security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Pytest**: Testing framework" >> $GITHUB_STEP_SUMMARY
      
      - name: Fail if quality checks failed
        if: needs.quality.result == 'failure'
        run: exit 1