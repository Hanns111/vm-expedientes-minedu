#!/usr/bin/env python3
"""
Test simple de validaci√≥n Pydantic - Sin dependencias complejas
"""

def test_pydantic_basic():
    """Test b√°sico de Pydantic"""
    print("üß™ SIMPLE PYDANTIC TEST")
    print("=" * 30)
    
    try:
        import pydantic
        print(f"‚úÖ Pydantic {pydantic.VERSION} disponible")
        
        # Test b√°sico de modelos
        from pydantic import BaseModel, Field
        from decimal import Decimal
        from typing import Optional
        
        class AmountTest(BaseModel):
            value: Decimal = Field(..., description="Valor monetario")
            text: str = Field(..., description="Texto original")
            confidence: float = Field(ge=0.0, le=1.0)
            
            class Config:
                validate_assignment = True
        
        # Test casos v√°lidos
        print("\nüí∞ Testing valid amounts:")
        valid_cases = [
            (30.00, "S/ 30.00", 0.9),
            (320.00, "S/ 320.00", 0.85),
            (380.00, "S/ 380.00", 0.92)
        ]
        
        for value, text, conf in valid_cases:
            try:
                amount = AmountTest(
                    value=Decimal(str(value)),
                    text=text,
                    confidence=conf
                )
                print(f"‚úÖ {text} - Valid (confidence: {conf})")
            except Exception as e:
                print(f"‚ùå {text} - Error: {e}")
        
        print("\nüí∞ Testing invalid amounts:")
        invalid_cases = [
            (-30.00, "S/ -30.00", 0.9),  # Valor negativo
        ]
        
        for value, text, conf in invalid_cases:
            try:
                amount = AmountTest(
                    value=Decimal(str(value)),
                    text=text,
                    confidence=conf
                )
                print(f"‚ö†Ô∏è  {text} - Should have failed")
            except Exception as e:
                print(f"‚úÖ {text} - Correctly rejected")
        
        print("\n‚úÖ Pydantic b√°sico funcionando correctamente")
        return True
        
    except ImportError as e:
        print(f"‚ùå Pydantic no disponible: {e}")
        return False

def test_directiva_simulation():
    """Simular datos reales de la directiva"""
    print("\nüìã SIMULACI√ìN DE DATOS REALES")
    print("=" * 35)
    
    # Datos conocidos de la directiva
    directiva_data = {
        "amounts": [
            {"value": 30.00, "context": "l√≠mite declaraci√≥n jurada"},
            {"value": 320.00, "context": "vi√°ticos servidores civiles"},
            {"value": 380.00, "context": "vi√°ticos ministros y viceministros"}
        ],
        "roles": [
            {"name": "Ministros De Estado", "allowance": 380.00},
            {"name": "Viceministros", "allowance": 380.00},
            {"name": "Secretario General", "allowance": 380.00},
            {"name": "Servidores Civiles", "allowance": 320.00}
        ],
        "numerals": [
            {"number": "8.4", "title": "VI√ÅTICOS"},
            {"number": "8.4.17", "title": "Declaraci√≥n Jurada"},
            {"number": "8.5", "title": "HOSPEDAJE"}
        ]
    }
    
    print("üí∞ Montos encontrados en la directiva:")
    for amount in directiva_data["amounts"]:
        print(f"   ‚Ä¢ S/ {amount['value']:.2f} - {amount['context']}")
    
    print("\nüë§ Roles identificados:")
    for role in directiva_data["roles"]:
        print(f"   ‚Ä¢ {role['name']}: S/ {role['allowance']:.2f}")
    
    print("\nüìã Numerales principales:")
    for numeral in directiva_data["numerals"]:
        print(f"   ‚Ä¢ {numeral['number']} - {numeral['title']}")
    
    print("\nüéØ Pregunta objetivo: '¬øCu√°l es el monto m√°ximo diario de vi√°ticos?'")
    print("üìñ Respuesta esperada:")
    print("   ‚Ä¢ Para Ministros, Viceministros y Secretario General: S/ 380.00")
    print("   ‚Ä¢ Para Servidores Civiles: S/ 320.00")
    print("   ‚Ä¢ L√≠mite para declaraci√≥n jurada: S/ 30.00")
    
    return True

def test_search_patterns():
    """Test de patrones de b√∫squeda"""
    print("\nüîç PATRONES DE B√öSQUEDA ESPERADOS")
    print("=" * 40)
    
    search_patterns = [
        {
            "query": "monto m√°ximo diario vi√°ticos",
            "expected_keywords": ["vi√°tico", "diario", "m√°ximo", "380", "320"],
            "expected_amounts": ["S/ 380.00", "S/ 320.00"]
        },
        {
            "query": "declaraci√≥n jurada l√≠mite",
            "expected_keywords": ["declaraci√≥n", "jurada", "l√≠mite", "30"],
            "expected_amounts": ["S/ 30.00"]
        },
        {
            "query": "ministros viceministros vi√°ticos",
            "expected_keywords": ["ministros", "viceministros", "380"],
            "expected_amounts": ["S/ 380.00"]
        }
    ]
    
    for i, pattern in enumerate(search_patterns, 1):
        print(f"\n{i}. Query: '{pattern['query']}'")
        print(f"   Keywords esperados: {', '.join(pattern['expected_keywords'])}")
        print(f"   Montos esperados: {', '.join(pattern['expected_amounts'])}")
    
    print("\n‚úÖ Patrones de b√∫squeda definidos para pruebas")
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ VALIDACI√ìN SIMPLIFICADA - DIRECTIVA VI√ÅTICOS")
    print("=" * 55)
    
    # Test 1: Pydantic b√°sico
    pydantic_ok = test_pydantic_basic()
    
    # Test 2: Simulaci√≥n de datos
    simulation_ok = test_directiva_simulation()
    
    # Test 3: Patrones de b√∫squeda
    patterns_ok = test_search_patterns()
    
    print("\n" + "=" * 55)
    print("üìä RESUMEN DE TESTS:")
    print(f"   ‚Ä¢ Pydantic b√°sico: {'‚úÖ' if pydantic_ok else '‚ùå'}")
    print(f"   ‚Ä¢ Simulaci√≥n datos: {'‚úÖ' if simulation_ok else '‚ùå'}")
    print(f"   ‚Ä¢ Patrones b√∫squeda: {'‚úÖ' if patterns_ok else '‚ùå'}")
    
    if all([pydantic_ok, simulation_ok, patterns_ok]):
        print("\nüéâ ¬°SISTEMA LISTO PARA PRUEBAS!")
        print("üìã Pr√≥ximos pasos:")
        print("   1. Ejecutar b√∫squeda con test_bm25_amounts.py")
        print("   2. Probar consultas espec√≠ficas con demo.py")
        print("   3. Validar respuestas de vi√°ticos")
        return True
    else:
        print("\n‚ö†Ô∏è  Algunos tests fallaron")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ Sistema validado - contin√∫a con las pruebas")
    else:
        print("\n‚ùå Revisa los errores antes de continuar") 